/* 190717 version
   get_bond.cpp: find contacts from the output of internal_{hb,np}.inp.
  This replaces get_hb.py, which had memory limitation.
  Usage:
  g++ get_bond.cpp ftn_bond.cpp -O3 -o te
  ./te input.dat
  input.dat: input configuration file, containing:

  ifname : output of internal_{hb,np}.inp (out_internal_{hb,np}.dat)
  read_bond_data: If present read the corresponding file that is generated by 
    previous execution of this program.
    If read_bond_data is present:
     - ifname is ignored.
     - Bond occupancy for the time specification (frm_ini,frm_fin,stride) is 
       calculated.
  ofname: output file prefix
  btype: bond type. 1) hbond (default) 2) nonpoloar

  npad: number of frames for calculating local occupancy
  lcut/hcut: occupancy cutoffs for identifying transitions
  * npad<0, occupancy trajectory is not calculated.
  * npad<0 || lcut<0 || hcut<0:  transition is not calculated

  dt: coord saving frequency
  frm_ini: Initial frame (default: 0)
  frm_fin: final frame (default: last)
  stride: number of frames to skip (default: 1)
  * for calculating occupancy trajectory and transition, whole trajectory is
    used, and  frm_{ini,fin}, stride are ignored .

  // for analysis:
  osele (string) if not empty, generate CHARMM selection command stream
    files for TCR residues w/ occupancy greater than ocut (defined in
    get_bond.h) osele is the directory name for writing files.

*/
#define SET_EXT // Do not put extern for global vars

#include "get_bond.h"

/************************************************************************/
int main(int argc, char *argv[])
{
  if (argc!=2) {
    cout<<"Usage: te input.dat"<<endl; return -1;
  }
  int i,j,k;
  string cfname=argv[1];

  contact c1;
  c1.get_args(cfname);
  //cout<<c1.ifname <<" "<<c1.ofname<<" "<< c1.btype<<endl;
  if (c1.trajname=="none") {
    c1.read_data();   c1.write_data();
  }
  else c1.read_bond_data(); // read bond trajectory from existing file

  if (c1.nframe==1) return 0;
  if (c1.osele=="") {
    c1.get_occupancy();
    c1.write_occupancy();
  }

  if ((c1.npad>0)&&(c1.osele =="" )) {
    c1.get_occ_traj();
    c1.write_occ_traj();
    if ((c1.hcut>0.)&&(c1.lcut>0.)) {
      c1.get_transition();
      c1.write_transition();
    }
  }

  if (c1.osele!="") {
    c1.get_occ_traj();
    c1.write_osele();
  }
  
  return 0;
}


